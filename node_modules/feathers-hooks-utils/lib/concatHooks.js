'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/**
 * Concatenate multiple hooks.
 * If one of the hooks is an array, its contents are concatenated.
 * Hooks are ignored if they are not functions. This allows hooks to be included conditionally.
 *
 * @param {array} hooks to be concatenated.
 * @result {array} concatenated hooks.
 *
 * Example:
 * const concatHooks = require('feathers-hooks-utils').concatHooks;
 * const auth = require('feathers-authentication').hooks;
 * const hooks = require('feathers-authentication').hooks;
 *
 * const restrictToAuthenticated = [
 *   auth.verifyToken(),
 *   auth.populateUser(),
 *   auth.restrictToAuthenticated()
 * ];
 * const populateOwnerId = false;
 *
 * exports.before = {
 *   create: concatHooks([
 *     restrictToAuthenticated,
 *     populateOwnerId && hooks.associateCurrentUser({ as: 'ownerId' }),
 *     hooks.associateCurrentUser({ as: 'createdById' }),
 *   ]),
 * };
 *
 * results in:
 *
 * create: [
 *   auth.verifyToken(),
 *   auth.populateUser(),
 *   auth.restrictToAuthenticated()
 *   hooks.associateCurrentUser({ as: 'createdById' }),
 * ]
 *
 */

module.exports = function (hooks) {
  var _ref;

  var res = (_ref = []).concat.apply(_ref, _toConsumableArray(hooks));
  return res.filter(function (hook) {
    return typeof hook === 'function';
  });
};